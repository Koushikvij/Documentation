API - Application Programming Interface

An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other

Why we need APIs?
1. Integration with third party entities without exposing the underlying code/business logic. For Eg. Booking.com talking to Oyo hotels
2. Helps to compartmentalize the different facets of software so that it will be easy during upgrades,migration (design problems). For eg., Changing the front end from Java to Angular while keeping the backend the same

* API sits before the backend/business logic and provide methods by which anyone can query the backend and fetch the appropriate results. The order will be something like FRONT END -> EXTERNAL APIs -> INTERNAL APIS -> BUSINESS LOGIC/CODE -> DATABASE.
* APIS should be independent of the language or platform like XML, JSON, FLATFILES.

The most common type of API is REST(light weight protocol) which has its own set of rules and criteria to define the interface layer. Other types are SOAP services.

HTTP methods which are commonly used to communicate with Rest APIâ€™s are

GET, POST, PUT, and DELETE otherwise called CRUD operations.

1. END POINT/BASE URI - The server where the API is hosted
2. GET (Retrieve)- method used to extract/retrieve information from the given server using a given URI. While using GET request, it should only extract data and should have no other effect on the data.No Payload/ Body required.
3. POST (Create)- A POST request is used to send the data to the server, for example, customer information, file upload etc, using HTML forms. Using form parameters/ body payload, we can send information using the POST method
4. PUT (Update)- Replaces all current representations of the target resource with the uploaded content
5. DELETE (Delete)- Removes all current representations of the target resource given by a URI
6. RESOURCES - Resources represent the API/Collection which can be accessed from the Server. For Example, in "google.com/maps", "google.com" is the BASE URL and "maps" is the resource
7. PATH PARAMETERS - These are the variable parts of the URL. They are typically used to point to a specific resource within a collection, such as user identified by an ID (sub resource). For example, in https://www.amazon.com/orders/112, 112 is the 112th order in the list of orders
8. QUERY PARAMETERS - It is used to sort or filter the resources . Query parameters are identified with "?" symbol. For example, in https://www.amazon.com/orders?sort_by=2/20/2020, we are getting the list of orders based on a specific date.
9. HEADERS/COOKIES - Headers represent the meta-data associated with the API request and response. In layman terms, we were sending Additional details to API to process our request. For example the authorization details 

BASIC API STRUCTURE -> BASE URL/RESOURCE/(QUERY/PATH) PARAMETERS


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

REST ASSURED:

Rest Assured is based on JAva where Python has Request library for Rest API automation testing

Get the latest Rest assured library from MVNrepository and remove the scope tags from the dependency
For accessing Rest assured library we need the following,
1. Rest Assured
2. TestNG
3. Hamcrest


		//given - all input details (like query parameters, headers, authroization, body and it will not have the request method and the resource url)
		//when - submit the API (here we pass only yhe request method and resource url)
		//then - Validate the response (we can validate the reponse outputs like, status code, response header and response body)
		//log().all() - need to provided for all the 3 given when and then sections separetely
		
		import io.restassured.RestAssured;
		import static io.restassured.RestAssured.*;
		
		RestAssured.baseURI=BaseURI;
		String response = given()
			.log().all()
			.queryParam("key","qaclick123")
			.queryParam("place_id", strPlaceID)
			.header("Content-Type","application/json")
			.body(BodyDetails.UpdatePlace(strPlaceID, NewAddressVal))
			.when()
			.put("maps/api/place/update/json")
			.then()
			.log().all()
			.assertThat()
			.statusCode(200)
			.header("Server", equalTo("Apache/2.4.41 (Ubuntu)"))
			.extract()
			.response()
			.asString();

		System.out.println("Update Place API is called successfully");
		return response;
		
NESTED JSON:

{
	"dashboard":{
		"purchaseAmount":910,
		"website":"rahulshettyacademy.com"
		},
	"courses": [
		{
			"title":"Selenium Python",
			"price":50,
			"copies":6
		},
		{
			"title":"Cypress",
			"price":40,
			"copies":4
		},
		{
			"title":"RPA",
			"price":45,
			"copies":10
		}
	]
}

Mock Response			

1. Print No of Courses returned by API
2. Print Purchase Amount
3. Print title of the first course
4. Print All course titles and their respective prices
5. Print no of copies sold by RPA course
6. Verify if sum of all course prices matches with the purchase amount

use the below code to directly read the body json from a file
new String(Files.readAllBytes(Paths.get("C:\\Users\\admin\\LibraryAddBook.json")))


Jira exposes 3 ways to authenticate via API
1. Basic authentication
2. OAuth
3. Cookie based authentication