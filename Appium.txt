Appium is an open source mobile automation tool for testing native Apps in both Android and iOS as well as mobile browsers.
Appium internally uses WebDriver JSON wire which is also used by Selenium

Hybrid apps -> Native + web browser pages 

Supported Platforms:
iOS
Android
Firefox OS

The code written by the automation developer gets translated into JSON and then sent to Appium server for further processing.

Apple's UIAutomation library without Appium you can only write tests using JavaScript and you can only run tests through the Instruments application. Similarly, with Google's UiAutomator you can only write tests in Java. Appium opens up the possibility of true cross-platform native mobile automation.

Android -> UIAutomator & UIAutomator2
iOS -> XCUITest & UIAutomation

INSTALLATIONS:
1. Download and install JDK latest stable version
2. Download Android Studio
	After installing the application open the software and select the default template and project names and wait for the updates to complete.
	Once the updates are completed click the Tools -> SDK Manager
	In Android SDK, select SDK Tools tab, Uncheck Hide Obsolete packages and ensure that Android SDK Tools (Obsolete) is installed. If not install the same.
3. Download Node platform for assissting installation of Appium Server
4. WINDOWS -> Set the following SYSTEM environment variables for JAVA, Android SDK & NODE
	JAVA_HOME ->
	C:\Program Files\Java\jdk-11.0.13
	ANDROID_HOME -> 
	C:\Users\Kakarot\AppData\Local\Android\Sdk	
	NODE_HOME ->
	C:\Program Files\nodejs
	MAVEN_HOME ->
	C:\apache-maven-3.8.4
	PATH -> 
	C:\Users\Kakarot\AppData\Local\Android\Sdk\tools\bin
	C:\Users\Kakarot\AppData\Local\Android\Sdk\tools
	C:\Users\Kakarot\AppData\Local\Android\Sdk\platform-tools
	C:\Users\Kakarot\AppData\Local\Android\Sdk\emulator
	C:\Program Files\nodejs
	C:\Program Files\nodejs\node_modules\npm\bin
	%MAVEN_HOME%/bin
	%JAVA_HOME%/bin
	
	Node is the software whereas NPM is a commandline installer used to download and install node modules like Appium, AngularJS, Protractor
5. MACOS->
	1. Open the bash profile in the TERMINAL,
		vi ~/.bash_profile
		
	2. Use the below set of commands to save the environment variables
		Hit "i" to insert and enter the below set of statements
		
		export JAVA_HOME=$(/usr/libexec/java_home)
		export MAVEN_HOME=/Users/<user_name>/Documents/apache-maven-3.6.3
		export M2=$MAVEN_HOME/bin
		export ANDROID_HOME=/users/<user_name>/Library/Android/sdk
		export PATH=$PATH:/usr/local/git/bin:/usr/local/bin:
		export PATH=$PATH:$ANDROID_HOME/platform-tools
		export PATH=$PATH:$ANDROID_HOME/tools
		export PATH=$PATH:$ANDROID_HOME/tools/bin
		export PATH=$PATH:$ANDROID_HOME/emulator
		
		Hit "ESC" ":wq"
		
		We need not explicitly add path for Node since Node & Python are present in the /usr/local/bin and we have already included them in the PATH variable as displayed above.
		
	3. Use the below command to source the bash_profile
		source ~/.bash_profile
6. Configure the emulator:
	1. Open Tools -> AVD Manager in Android Studio
	2. Click "Create Virtual Device" button
	3. Select the type of device you want to test and feed in required settings value as per testing needs
7. Download and install Appium Server
	1. Open command prompt/terminal as administrator
	2. hit the command "npm install -g appium" in WINDOWS or "sudo npm install -g appium" in MACOS
8. Start Appium server
	1. Open command prompt/terminal as administrator
	2. hit "appium" command
	
	Appium servers  by default will run on 4723 port of the localhost
9. Download and install Maven and Eclipse
10. Create a Java project in Eclipse and convert it to Maven project by right clicking on the project name, Configure -> Convert to Maven Project
11. Add dependencies for Appium Java v7.5.1, Selenium Java v3.141.59 and TestNG v7.4.0
12. Launch the emulator by clicking on the emulator play button in Tools -> AVD Manager

UIAutomatorViewer helps to identify the objects on the app. We need to open the emulator first and then launch the uiautomatorviewer to identify the objects.

OBJECT IDENTIFICATION:

The tagname for the objects to be identified will be the class name, we cannot simply give TextView, instead we need to give android.widget.TextView to get a meaningful tagname that is understood by Appium

Syntax for AndroidUIAutomator is 
driver.findElementByAndroidUIAutomator("attribute('value')");

Click is to place the cursor on the object and click it in Web whereas the Tap is used to do the same in Mobile

If there are $ symbols or any other special character symbol in class name then xpath will not work and we need to use * in the tagname section of the xpath

To use Android code within the Appium code we need to use the findElementsByAndroidUIAutomator and then pass the values of the Android code within. For example,

ADD REAL PHYSICAL DEVICE:

	1. Follow the steps listed in the URL to make the physical device detectable -> https://developer.chrome.com/docs/devtools/remote-debugging/
	
	chrome://inspect/#devices

List of ADB commands:
//adb devices- Unauthorized
//adb kill-server
//adb start-server
//adb devices

To install the app via adb in to the emulator, use the below command.
//adb install C:\Users\Kakarot\Downloads\General-Store.apk
//adb install C:\Users\Kakarot\Downloads\google-chrome-97-0-4692-87.apk

When working with Hybrid apps, if we are switching between the native app and the browser, we need to intimate appium that we are switching context from the native app to the browser. This will instruct appium to sue the selenium libraries for identification in the mobile web browser

ANDROID CHROME BROWSER AUTOMATION WITH APPIUM:
	1. Build desired capabilities for Mobile Browser
	2. Understand how to inspect and grab mobile browser locators
	3. Build and run automation tests on chrome mobile browser with appium
	4. Understand how to scroll in browsers.
	
Some of the appium supported events like tap might not be directly supported by the mobile browsers. However scrolling is supported in the browser.

We can identify the mobile browser objects from the web browser in desktop itself. We need to click the "Toggle device toolbar" button next to "Inspect" button in the Inspect viewer (F12). From then on the same locators will work in the mobile browser as well.

There are 2 types of mobile website development methodology.
1. The same code base will be used for both the desktop web browser as well as the mobile web browser. In this type, we can inspect the locators by clickin on the toggle device toolbar. Eg: https://www.rahulshettyacademy.com/angularAppdemo/
2. Code base will be different for the mobile web browser and the desktop web browser. In  this case, we need to refer to the appropriate URL to identify the locators for mobile browser automation. Eg: https://cricbuzz.com & https://m.cricbuzz.com

Always check with the developer on what methodology they used for the web and mobile web pages.

SelectorHub is used to validate the CSS paths. This is a plugin to chrome.

IOS APPS AUTOMATION TESTING WUTH APPIUM:
	1. Download appium server
	2. Install XCode to compile App on suitable iPhone/iPad
		- The reason why we are compiling the app is to ensure that the app is compatible with the iphone/ipad version under test. It is not something like the same app will be working across multiple iOS versions and devices.Hence to compile the app we need XCode
		- We can get the xcode from app store. it will occupy a lot of space around 12GB
		
	3. Launch iPhone Simulator		
		- Look for *.xcodeproj file and double click on it to open the project in xcode editor
		- Look for *.app file in the project folder. In order to get the app extension file for the iOS version and iPhone version that we need to test, we need to compile this file in xcode
		- Select the particular version of the iphone that we need to test and click Run button to compile the app. It will automatically the iphone that we chose and invokes the app
		
	4. Setup Appium Maven Project with Appium client jars
	5. Desired Capabilities needed to invoke App on iphone
		- capabilities.setCapability(MobileCapabilityType.PLATFORM_VERSION,"14.2");//iPhone 12 supports 14.2
			- To get the platform version, we need to open the terminal and type the following commands
			
				brew install carthage
				instruments -s devices
			This will return list of iphone/ipad simujlators available, their platform version and their unique UDID
		- capabilities.setCapability(MobileCapabilityType.DEVICE_NAME,"iPhone 12 Pro");//Name should be excatly as is displayed in the simulator list
		- IOS_XCUI_Test is the frameowkr provided by Apple which is used by Appium to test the applications. We need to provide the framework in the desired capabilities		
		- capabilities.setCapability(MobileCapabilityType.AUTOMATION_NAME,AutomationName.IOS_XCUI_TEST);
		- capabilities.setCapability(IOSMobileCapabilityType.LAUNCH_TIMEOUT,50000);
		- capabilities.setCapability("commandTimeouts","12000");
		- capabilities.setCapability(MobileCapabilityType.APP,"/usr/xxxx/desktop/UIKitCatalog.app");
		
		IOSDriver driver = new IOSDriver<>(new URL("http://localhost:4723/wd/hub"),capabilities);
		
	6. Understand how to inspect objects of iOS app using appium inspector
		- Appium inspector is used to identify the objects.
		- Accessibility ID & XPath are the predominant modes of object locators in ios automation using appium
		-XCUIElementTypeCell is used to determine the test box
		-XCUIElementTypeStaticText is used to determine the text messages
		
	7. Build appium automation script for functional testing of ios apps
		//scroll
		HaskMap<String,Object> scrollObject=new HashMap();
		scrollObject.put("direction","down");		
		scrollObject.put("name","Web View");		
		driver.executeScript("mobile:scroll",scrollObject);
		driver.findElementByAccessibilityID("Web View").click();
		
		to go back, we need to identify the locator of the back text in ios
		
		//Picker Wheel
		//XCUIElementTypePickerWheel
		driver.findElementByAccessibilityID("Red color component value").sendKeys("80");
		driver.findElementByAccessibilityID("Green color component value").sendKeys("220");
		driver.findElementByAccessibilityID("Blue color component value").sendKeys("105");
		
		to get the current value of the wheel, we use the below set of code
		
		String R= driver.findElementByAccessibilityID("Red color component value").getText();
		String G= driver.findElementByAccessibilityID("Green color component value").getText();
		String B= driver.findElementByAccessibilityID("Blue color component value").getText();
		
		//sliders
		//XCUIElementTypeSlider
		IOSElement slider = (IOSElement)driver.findElementByXPath("//XCUIElementTypeSlider");
		slider.setValue("0%");//0 to 1 with 50% to be represented as 0.5 so 0% will be 0%, 50% will be 0.5% and 100% will be 1%
		slider.setValue("1%");
		
		String slidervalue = slider.getAttribute("value");
		
		//long press		
		import static io.appium.java_client.touch.TapOptions.tapOptions;
		import static io.appium.java_client.touch.LongPressOptions.longPressOptions;
		import static io.appium.java_client.touch.offset.ElementOption.element;
		import static java.time.Duration.ofSeconds;

		MobileElement elem = (MobileElement)driver.findElementByName("Long tap");
		IOSTouchAction actions = new IOSTouchAction(driver);
		actions.longPress(longPressOptions().withElement(element(elem)).withDuration(ofSeconds(2))).release().perform();
		
		//tap
		import static io.appium.java_client.touch.TapOptions.tapOptions;
		import static io.appium.java_client.touch.LongPressOptions.longPressOptions;
		import static io.appium.java_client.touch.offset.ElementOption.element;
		import static java.time.Duration.ofSeconds;		

		MobileElement elem = (MobileElement)driver.findElementByXPath("//XCUIElementTypeSwitch[1]");
		IOSTouchAction actions = new IOSTouchAction(driver);
		actions.tap(tapOptions().withElement(element(elem))).perform();
		
		//swipe
		
		//3d gesture
		

IOS REAL DEVICE AUTOMATION :

	1. /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	
	Install below software

	2. brew install libimobiledevice

	3. brew install ios-deploy


Three new Capabilities are needed to run the Tests on real Device :

capabilities.setCapability("xcodeOrgId","xxxxxxxx");//xcodeorgid will be provided by the team
capabilities.setCapability("xcodeSigningId","iPhone Developer");
capabilities.setCapability("udid","xxxxxxxx");//udid is tied up to the real device and differs from device to device
capabilities.setCapability("updateWDABundleId","xxxxxxx");//provisioning profile will be provided by the team. In that profile, we will be having the unique WDA bundle ID

How to get the xcodeOrgId?
It is TeamID  generated by Apple.You can find your Team ID using your developer account. Sign in to developer.apple.com/account, and click Membership in the sidebar.
 Your Team ID appears in the Membership Information section under the team name

How to get udid?
https://www.wikihow.com/Obtain-the-Identifier-Number-(UDID)-for-an-iPhone,-iPod-or-iPad

What is updateWDABundleId?
Often we need provisioning profile from Apple to run the apps on Real Devices.And this Provisioning Profile generates Bundle ID
And we need to Sign the App to run on the device using Bundle id.

Connect your Device.

How to Create Provisioning Profile to run APpium Tests?
From Xcode -


Verify Untrusted Developer
Run Build for WebDriverAgent and App under Test with this Provisional Profile in xcode to compile the app for the real device that you have connected.

Refer official appium documentation to resolve any errors that you face

1. First create provisioning profile of WebDriverAgentRunner
2. Why i am doing this?
3. Because this will give Bundle ID
4. Build your WebDriverAgentRunner Project
5. Fix any error if you face. Refer official appium documentation to resolve any errors that you face
6. Next build the app which you need to run on xcode with your real device 
7. Then it will generate .app file
8. Pass this path in your desired capabilities